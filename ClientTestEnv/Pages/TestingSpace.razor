@page "/testenv"
@inject IJSRuntime jsr
@inject NavigationManager NavigationManager
@inject HttpClient client
@inject State State
@using System.Net.Http;
@using System.Text;
@using System.Threading.Tasks;
@using CodeSubmissionClient.ClientTestEnv.Components
@using Newtonsoft.Json

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap');

    * {
        font-family: 'Montserrat', sans-serif;
        line-height: 22px;
    }

    .wrapper
{
    width: 100%;
    height: 100vh;    
}

/*NAV*/
.nav-container
{
    width: 100%;
    height: 8vh;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0px 2rem;
    box-shadow: rgba(0, 0, 0, 0.2) 0px 12px 28px 0px, rgba(0, 0, 0, 0.1) 0px 2px 4px 0px, rgba(255, 255, 255, 0.05) 0px 0px 0px 1px inset;
}

.icon span
{
    font-weight: bold;
}


/*MAIN SECTION*/
.center-container
{
    width: 100%;
    height: 86vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

/*FOOTER*/
.footer-container
{
    width: 100%;
    height: 6vh;
    display: flex;
    align-items: center;
    justify-content: flex-end;   
}

.footer-container span{
    font-size: 13px;
    font-weight: bold;
    margin-right: 2rem;
}

@@media screen and (max-width: 450px)
{
    .icon span
    {
        display: none;
    }
}

@@media screen and (max-width: 240px)
{
    .wrapper
    {
        display: none;
    }
}

@@media screen and (max-height: 300px)
{
    .wrapper
    {
        display: none;
    }
}

</style>

@if (!loaded)
{
    //laoding screen
        <p> Loading... </p>
}
else
{
    if (string.IsNullOrEmpty(username))
    {
        //once loaded, check if person is a is authorised to access page
                <RegLogComponent />
    }
    else
    {
        //load srcreen 
        if (InitialCount > 0 && role.ToLower().Equals("candidate"))
        {
            NavigationManager.NavigateTo("/alreadyDone");
        }
        else
        {

                        <div class="wrapper">


                            <div class="nav-container">

                                <div class="icon">

                                    <img src="images/launch.png" alt="astro"> &nbsp;
                                    <span>Xebec Test Environment</span>

                                </div>

                                <div class="btn-container">

                        @if (Counter > 1 && Counter < 6)
                        {
                                            <button class="btn btn-outline-primary btn-sm mr-2" @onclick="PageDown">Prev</button>
                                            <button class="btn btn-outline-success btn-sm" @onclick="PageUp">Next</button>
                        }
                        else if (Counter == 6)
                        {
                                            <button class="btn btn-outline-primary btn-sm mr-2" @onclick="PageDown">Prev</button>
                                            <button class="btn btn-outline-danger btn-sm" @onclick="SubmitResponse">Submit</button>
                        }
                        else
                        {
                                            <button class="btn btn-outline-success btn-sm" @onclick="PageUp">Next</button>
                        }


                                </div>

                            </div>

                            <UserAuthActionComponent />

                            <div class="center-container">


                    @if (Counter == 1)
                    {
                                        <QuestionOneComponent />
                    }
                    else if (Counter == 2)
                    {
                                        <QuestionTwoComponent />
                    }
                    else if (Counter == 3)
                    {
                                        <QuestionThreeComponent />
                    }
                    else if (Counter == 4)
                    {
                                        <QuestionFourComponent />
                    }
                    else if (Counter == 5)
                    {
                                        <QuestionFiveComponent />
                    }
                    else if (Counter == 6)
                    {
                                        <QuestionSixComponent />
                    }

                            </div>

                            <div class="footer-container">

                                <span>Nebula 2021 &reg;</span>

                            </div>

                        </div>
        }
    }
}


@code
{

    public SubmissionSample Submission { get; set; }
    private int Counter = 1;
    private int InitialCount = 0;
    private bool loaded = false;
    private async Task PageUp()
    {
        if (State.Count <= State.Submissions.Count && State.isSaved)
        {
            Counter++;
            State.Count++;
            State.isSaved = false;
            if (Counter > 6)
                Counter = 6;
        }
        else
        {
            await jsr.InvokeVoidAsync("alert", "Don't forget to save your work!");
        }

    }

    private void PageDown()
    {
        Counter--;
        State.Count--;
        if (Counter < 1)
            Counter = 1;

    }

    /*AUTHORIZING USER*/
    string username = string.Empty;
    string role = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
        if (!string.IsNullOrWhiteSpace(userdata))
        {
            string[] userdetails = userdata.Split(';', 3);
            username = userdetails[0];
            role = userdetails[1].ToLower();
            State.Submissions = await client.GetFromJsonAsync<List<SubmissionSample>>($"https://codesubmissionapi.azurewebsites.net/api/submissionsample/email={username}");
            InitialCount = State.Submissions.Count;
            loaded = true;
        }
    }
    @* https://codesubmissionapi.azurewebsites.net/api/submissionsample *@

    private async Task SubmitResponse()
    {
        if (State.Count == State.Submissions.Count)
        {
            foreach (var item in State.Submissions)
            {
                item.UserEmail = username;
            }
            var SubmissionJson = JsonConvert.SerializeObject(State.Submissions);
            var httpContent = new StringContent(SubmissionJson, Encoding.UTF8, "application/json");
            await client.PostAsync("https://codesubmissionapi.azurewebsites.net/api/SubmissionSample", httpContent);

            await client.PostAsJsonAsync("https://prod-168.westeurope.logic.azure.com:443/workflows/9acd2517f22a4b9aad3cf300df015596/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=U_cZvxtuKiZSIPoAWoXd2AM_uEn291I3gNJVjlrH-DI", State.Submissions[0]);

            NavigationManager.NavigateTo("/done");
        }
        else
        {
            await jsr.InvokeVoidAsync("alert", "Don't forget to save your work!");
        }

    }

}
